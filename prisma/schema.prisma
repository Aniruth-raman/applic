generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String           @id @unique @default(cuid())
  name          String
  email         String           @unique
  image         String?
  password      String?
  emailVerified Boolean          @default(false)
  applications  JobApplication[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Authenticator Authenticator[]
  Document      Document[]
  Support       Support[]
  Feedback      Feedback[]

  @@index([id, email])
}

model EmailVerificationRequest {
  identifier String // User email
  token      String   @unique @default(cuid())
  otp        Int
  expires    DateTime

  @@id([identifier, token])
  @@index([identifier])
}

model JobApplication {
  id               Int        @id @unique @default(autoincrement())
  posting_link     String
  role             String
  company          String
  salary           Float
  type             JobType
  location         String
  country          String
  status           JobStatus
  previousStatus   JobStatus?
  User             User       @relation(fields: [userId], references: [id])
  userId           String
  interview        Boolean    @default(false)
  interviewDate    DateTime?
  emailSentDate    DateTime?
  interviewerEmail String?
  notes            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Document {
  id        Int      @id @unique @default(autoincrement())
  name      String
  type      String
  size      Int
  url       String
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobType {
  onsite
  remote
  hybrid
}

enum JobStatus {
  bookmarked
  applied
  interview
  offer
  selected
  rejected
  archived
}

model Support {
  id          String        @id @default(uuid())
  category    String
  subject     String
  description String
  status      SupportStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
}

model Feedback {
  id          String   @id @default(uuid())
  category    String
  subject     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

enum SupportStatus {
  PENDING
  RESOLVED
  CLOSED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
