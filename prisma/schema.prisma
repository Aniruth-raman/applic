generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("APPLIC_POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("APPLIC_POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String           @id @default(cuid())
  name          String
  email         String           @unique
  image         String?
  password      String?
  emailVerified Boolean          @default(false)
  applications  JobApplication[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Authenticator Authenticator[]
}

model JobApplication {
  id             Int        @id @default(autoincrement())
  posting_link   String
  role           String
  company        String
  salary         Float
  type           JobType
  location       String
  country        String
  status         JobStatus
  previousStatus JobStatus?
  User           User       @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum JobType {
  onsite
  remote
  hybrid
}

enum JobStatus {
  bookmarked
  applied
  interview
  offer
  rejected
  archived
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
